import discord
from discord import app_commands
import os
from dotenv import load_dotenv
from urllib.parse import quote
import requests
from datetime import datetime
import asyncio
import aiohttp  # Th√™m import aiohttp cho async requests

# Load environment variables
load_dotenv()

# Configuration from environment variables
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
BANK_ID = os.getenv('BANK_ID', '970436')
ACCOUNT_NO = os.getenv('ACCOUNT_NO')
ACCOUNT_NAME = os.getenv('ACCOUNT_NAME')
# Th√™m API_KEY cho l·ªánh addtime
API_KEY = os.getenv('API_KEY')

# Th√™m h·∫±ng s·ªë cho ROLE_ID
CUSTOMER_ROLE_ID = 1334194617322831935

# Th√™m h·∫±ng s·ªë cho LOG_CHANNEL_ID
LOG_CHANNEL_ID = 1336368295363874909


def generate_vietqr_content(amount: float, message: str = ""):
    """
    Generate VietQR content with proper URL encoding
    """
    # Ensure all components are properly encoded
    encoded_account_name = quote(ACCOUNT_NAME)
    encoded_message = quote(message)

    # Format according to VietQR standard
    qr_url = f"https://img.vietqr.io/image/{BANK_ID}-{ACCOUNT_NO}-compact.png"
    qr_url += f"?amount={int(amount)}"
    if message:
        qr_url += f"&addInfo={encoded_message}"
    qr_url += f"&accountName={encoded_account_name}"

    print(f"Generated QR URL: {qr_url}")  # For debugging
    return qr_url


class QRPaymentBot(discord.Client):
    def __init__(self):
        intents = discord.Intents.default()
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        try:
            print("Synchronizing commands...")
            await self.tree.sync()
            print("Command synchronization successful!")
        except Exception as e:
            print(f"Error synchronizing commands: {e}")


bot = QRPaymentBot()


@bot.tree.command(name="thanhtoan", description="T·∫°o m√£ QR thanh to√°n ng√¢n h√†ng")
@app_commands.describe(
    amount="S·ªë l∆∞·ª£ng key c·∫ßn thanh to√°n",
)
async def generate_qr(
    interaction: discord.Interaction,
    amount: int,
):
    try:
        # Validate key amount
        if amount < 5:
            await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 5!")
            return

        # Calculate price based on quantity
        total_price = 250000 * amount if amount >= 10 else 275000 * amount

        await interaction.response.defer()

        # Generate VietQR URL with encoded parameters
        message = f"{interaction.user.name}"
        qr_url = generate_vietqr_content(total_price, message)

        # Create embed with payment information
        embed = discord.Embed(
            title="üí≥ Th√¥ng tin thanh to√°n",
            description=f"**S·ªë l∆∞·ª£ng key:** {amount} key\n**ƒê∆°n gi√°:** {250000 if amount >= 10 else 275000:,} VNƒê/key",
            color=0x00ff00  # M√†u xanh l√° c√¢y t∆∞∆°i s√°ng
        )

        # Th√¥ng tin ng√¢n h√†ng
        embed.add_field(
            name="üè¶ Th√¥ng tin t√†i kho·∫£n",
            value=f"```\nNg√¢n h√†ng: BIDV\nCh·ªß TK: {ACCOUNT_NAME}\nS·ªë TK: {ACCOUNT_NO}\n```",
            inline=False
        )

        # Th√¥ng tin thanh to√°n
        embed.add_field(
            name="üí∞ Chi ti·∫øt thanh to√°n",
            value=f"```\nT·ªïng ti·ªÅn: {total_price:,} VNƒê\nN·ªôi dung CK: {message}\n```",
            inline=False
        )

        # Set the encoded QR URL
        try:
            embed.set_image(url=qr_url)
        except Exception as e:
            print(f"Error setting image URL: {e}")
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return

        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {interaction.user.name}")

        await interaction.followup.send(embed=embed)

    except ValueError:
        await interaction.followup.send('‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.')
    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.')


@bot.tree.command(name="giahan", description="T·∫°o m√£ QR gia h·∫°n")
@app_commands.describe(
    amount="S·ªë l∆∞·ª£ng key c·∫ßn gia h·∫°n",
)
async def extend_subscription(
    interaction: discord.Interaction,
    amount: int,
):
    try:
        # Validate key amount
        if amount <= 0:
            await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n 0!")
            return

        # Calculate price based on quantity
        total_price = 250000 * amount if amount >= 10 else 275000 * amount

        await interaction.response.defer()

        # Generate VietQR URL with encoded parameters
        message = f"Gia han - {interaction.user.name}"
        qr_url = generate_vietqr_content(total_price, message)

        # Create embed with payment information
        embed = discord.Embed(
            title="üí≥ Th√¥ng tin gia h·∫°n",
            description=f"**S·ªë l∆∞·ª£ng key:** {amount} key\n**ƒê∆°n gi√°:** {250000 if amount >= 10 else 275000:,} VNƒê/key",
            color=0x00ff00
        )

        # Th√¥ng tin ng√¢n h√†ng
        embed.add_field(
            name="üè¶ Th√¥ng tin t√†i kho·∫£n",
            value=f"```\nNg√¢n h√†ng: BIDV\nCh·ªß TK: {ACCOUNT_NAME}\nS·ªë TK: {ACCOUNT_NO}\n```",
            inline=False
        )

        # Th√¥ng tin thanh to√°n
        embed.add_field(
            name="üí∞ Chi ti·∫øt thanh to√°n",
            value=f"```\nT·ªïng ti·ªÅn: {total_price:,} VNƒê\nN·ªôi dung CK: {message}\n```",
            inline=False
        )

        # Set the encoded QR URL
        try:
            embed.set_image(url=qr_url)
        except Exception as e:
            print(f"Error setting image URL: {e}")
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return

        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {interaction.user.name}")

        await interaction.followup.send(embed=embed)

    except ValueError:
        await interaction.followup.send('‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.')
    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.')


@bot.tree.command(name="sendmsg", description="G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp ƒë·∫øn user")
@app_commands.describe(
    user="Ng∆∞·ªùi d√πng c·∫ßn g·ª≠i tin nh·∫Øn",
    message="N·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i"
)
async def send_direct_message(
    interaction: discord.Interaction,
    user: discord.Member,
    message: str
):
    try:
        await interaction.response.defer(ephemeral=True)

        try:
            # Ki·ªÉm tra v√† th√™m role cho user
            role_added = await check_and_add_role(user, CUSTOMER_ROLE_ID)
            if not role_added:
                await interaction.followup.send(
                    "‚ùå Kh√¥ng th·ªÉ th√™m role cho user. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa bot.",
                    ephemeral=True
                )
                return

            dm_channel = await user.create_dm()

            # T√°ch chu·ªói th√†nh c√°c c·∫∑p d·ª±a tr√™n kho·∫£ng tr·∫Øng
            pairs = message.split()
            formatted_lines = []

            # X·ª≠ l√Ω t·ª´ng c·∫∑p 3 ph·∫ßn t·ª≠ (tk - mk)
            for i in range(0, len(pairs), 3):
                if i + 2 < len(pairs):  # ƒê·∫£m b·∫£o ƒë·ªß 3 ph·∫ßn t·ª≠ cho m·ªói d√≤ng
                    acc = pairs[i]
                    dash = pairs[i+1]  # D·∫•u -
                    pwd = pairs[i+2]
                    formatted_lines.append(f"{acc} {dash} {pwd}")

            # Join c√°c d√≤ng th√†nh text
            accounts_text = '\n'.join(formatted_lines)

            # T·∫°o embed ƒë·ªÉ g·ª≠i cho user
            user_embed = discord.Embed(
                title="üîë Th√¥ng tin t√†i kho·∫£n",
                description=f"Format: `username - password`\nS·ªë l∆∞·ª£ng: `{len(formatted_lines)} key`\n\n" +
                f"```\n{accounts_text}\n```" if formatted_lines else "",
                color=discord.Color.blue()
            )
            user_embed.set_footer(
                text="L∆∞u √Ω: M·ªói d√≤ng l√† m·ªôt t√†i kho·∫£n v√† m·∫≠t kh·∫©u")

            # G·ª≠i embed cho user
            await dm_channel.send(embed=user_embed)

            # T·∫°o embed ƒë·ªÉ ghi log
            log_embed = discord.Embed(
                title="üìù Log G·ª≠i Key",
                description="Chi ti·∫øt giao d·ªãch:",
                color=discord.Color.green(),
                timestamp=interaction.created_at
            )
            log_embed.add_field(
                name="Ng∆∞·ªùi g·ª≠i",
                value=f"{interaction.user.mention} (`{interaction.user.name}`)",
                inline=True
            )
            log_embed.add_field(
                name="Ng∆∞·ªùi nh·∫≠n",
                value=f"{user.mention} (`{user.name}`)",
                inline=True
            )
            log_embed.add_field(
                name="S·ªë l∆∞·ª£ng key",
                value=f"`{len(formatted_lines)} key`",
                inline=True
            )
            log_embed.add_field(
                name="Danh s√°ch key",
                value=f"```\n{accounts_text}\n```",
                inline=False
            )

            # G·ª≠i log v√†o channel
            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(embed=log_embed)
            else:
                print(f"Kh√¥ng t√¨m th·∫•y channel log v·ªõi ID {LOG_CHANNEL_ID}")

            await interaction.followup.send(
                f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {user.name} v√† th√™m role!",
                ephemeral=True
            )
        except discord.Forbidden:
            await interaction.followup.send(
                f"‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn {user.name}. Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë√£ ch·∫∑n DM.",
                ephemeral=True
            )
        except Exception as e:
            print(f"Error sending DM: {e}")
            await interaction.followup.send(
                "‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn.",
                ephemeral=True
            )

    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send(
            "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
            ephemeral=True
        )


@bot.event
async def on_ready():
    print(f'ü§ñ {bot.user} ƒë√£ s·∫µn s√†ng!')

# Th√™m h√†m ki·ªÉm tra v√† th√™m role


async def check_and_add_role(member: discord.Member, role_id: int):
    """
    Ki·ªÉm tra v√† th√™m role cho member n·∫øu ch∆∞a c√≥
    """
    try:
        # L·∫•y role t·ª´ ID
        role = member.guild.get_role(role_id)
        if not role:
            print(f"Kh√¥ng t√¨m th·∫•y role v·ªõi ID {role_id}")
            return False

        # Ki·ªÉm tra xem member ƒë√£ c√≥ role ch∆∞a
        if role not in member.roles:
            await member.add_roles(role)
            print(f"ƒê√£ th√™m role {role.name} cho {member.name}")
            return True
        return True
    except Exception as e:
        print(f"L·ªói khi th√™m role: {e}")
        return False


async def check_single_key(session, key):
    """
    H√†m ki·ªÉm tra m·ªôt key ri√™ng l·∫ª
    """
    api_url = f"http://sv.hackrules.com/API/api.php?TK={key}"
    
    for attempt in range(3):  # Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
        try:
            async with session.get(api_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    try:
                        data = await response.json()
                        
                        if not isinstance(data, dict):
                            return (key, "error")

                        error = data.get("error")
                        message = data.get("message")
                        seconds_remaining = data.get("data")

                        if error is None or message is None:
                            return (key, "error")

                        # Convert error to int if needed
                        if isinstance(error, str):
                            try:
                                error = int(error)
                            except ValueError:
                                return (key, "error")

                        # Ph√¢n lo·∫°i key
                        if error == 2:
                            return (key, "not_activated")
                        elif error != 0 or message.lower() != "ok":
                            return (key, "inactive")
                        else:
                            try:
                                seconds_remaining = int(seconds_remaining)
                                if seconds_remaining > 0:
                                    days_remaining = seconds_remaining // (24 * 3600)
                                    return (key, "active", days_remaining)
                                else:
                                    return (key, "inactive")
                            except (ValueError, TypeError):
                                return (key, "error")
                    except:
                        if attempt == 2:
                            return (key, "error")
                else:
                    if attempt == 2:
                        return (key, "error")
        except:
            if attempt == 2:
                return (key, "error")
        await asyncio.sleep(1)
    return (key, "error")

@bot.tree.command(name="check", description="Ki·ªÉm tra th·ªùi h·∫°n c·ªßa key")
@app_commands.describe(
    key="Key c·∫ßn ki·ªÉm tra th·ªùi h·∫°n (nhi·ªÅu key c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng)"
)
async def check_key(
    interaction: discord.Interaction,
    key: str
):
    try:
        # Defer the response since we'll make HTTP requests
        await interaction.response.defer(ephemeral=True)
        
        # T√°ch c√°c key n·∫øu c√≥ nhi·ªÅu key
        key_list = [k.strip() for k in key.split() if k.strip()]
        
        if len(key_list) > 30:
            await interaction.followup.send("‚ùå Vui l√≤ng ki·ªÉm tra t·ªëi ƒëa 30 key m·ªôt l·∫ßn.", ephemeral=True)
            return
            
        if len(key_list) > 1:
            # Kh·ªüi t·∫°o lists ƒë·ªÉ l∆∞u k·∫øt qu·∫£
            active_keys = []
            inactive_keys = []
            not_activated_keys = []
            error_keys = []

            # T·∫°o session ƒë·ªÉ t√°i s·ª≠ d·ª•ng connection
            async with aiohttp.ClientSession() as session:
                # Ch·∫°y t·∫•t c·∫£ requests ƒë·ªìng th·ªùi
                tasks = [check_single_key(session, key) for key in key_list]
                results = await asyncio.gather(*tasks, return_exceptions=True)

                # Ph√¢n lo·∫°i k·∫øt qu·∫£
                for result in results:
                    if isinstance(result, tuple):
                        key = result[0]
                        status = result[1]
                        if status == "active":
                            active_keys.append((key, result[2]))  # result[2] l√† s·ªë ng√†y
                        elif status == "inactive":
                            inactive_keys.append(key)
                        elif status == "not_activated":
                            not_activated_keys.append(key)
                        else:
                            error_keys.append(key)
                    else:
                        error_keys.append(key)

            # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
            embed = discord.Embed(
                title="üìä K·∫øt qu·∫£ ki·ªÉm tra keys",
                color=discord.Color.blue()
            )

            # Th√™m t·ªïng k·∫øt l√™n ƒë·∫ßu
            total = len(key_list)
            summary = f"T·ªïng s·ªë key: **{total}**\n"
            summary += f"‚úÖ C√≤n h·∫°n: **{len(active_keys)}**\n"
            summary += f"‚ùå H·∫øt h·∫°n: **{len(inactive_keys)}**\n"
            summary += f"‚ö†Ô∏è Ch∆∞a k√≠ch ho·∫°t: **{len(not_activated_keys)}**\n"
            summary += f"‚õî L·ªói: **{len(error_keys)}**"
            
            embed.description = summary

            # Th√™m th√¥ng tin cho t·ª´ng lo·∫°i key
            if active_keys:
                # S·∫Øp x·∫øp theo s·ªë ng√†y c√≤n l·∫°i
                active_keys.sort(key=lambda x: x[1], reverse=True)
                active_keys_text = "\n".join([f"`{key}` - **{days}** ng√†y" for key, days in active_keys])
                if len(active_keys_text) > 1024:
                    chunks = [active_keys_text[i:i+1024] for i in range(0, len(active_keys_text), 1024)]
                    for i, chunk in enumerate(chunks):
                        embed.add_field(
                            name=f"‚úÖ Keys c√≤n h·∫°n ({len(active_keys)}) - Ph·∫ßn {i+1}",
                            value=chunk,
                            inline=False
                        )
                else:
                    embed.add_field(
                        name=f"‚úÖ Keys c√≤n h·∫°n ({len(active_keys)})",
                        value=active_keys_text,
                        inline=False
                    )

            if inactive_keys:
                inactive_keys_text = "\n".join([f"`{key}`" for key in inactive_keys])
                if len(inactive_keys_text) > 1024:
                    chunks = [inactive_keys_text[i:i+1024] for i in range(0, len(inactive_keys_text), 1024)]
                    for i, chunk in enumerate(chunks):
                        embed.add_field(
                            name=f"‚ùå Keys h·∫øt h·∫°n ({len(inactive_keys)}) - Ph·∫ßn {i+1}",
                            value=chunk,
                            inline=False
                        )
                else:
                    embed.add_field(
                        name=f"‚ùå Keys h·∫øt h·∫°n ({len(inactive_keys)})",
                        value=inactive_keys_text,
                        inline=False
                    )

            if not_activated_keys:
                not_activated_keys_text = "\n".join([f"`{key}`" for key in not_activated_keys])
                if len(not_activated_keys_text) > 1024:
                    chunks = [not_activated_keys_text[i:i+1024] for i in range(0, len(not_activated_keys_text), 1024)]
                    for i, chunk in enumerate(chunks):
                        embed.add_field(
                            name=f"‚ö†Ô∏è Keys ch∆∞a k√≠ch ho·∫°t ({len(not_activated_keys)}) - Ph·∫ßn {i+1}",
                            value=chunk,
                            inline=False
                        )
                else:
                    embed.add_field(
                        name=f"‚ö†Ô∏è Keys ch∆∞a k√≠ch ho·∫°t ({len(not_activated_keys)})",
                        value=not_activated_keys_text,
                        inline=False
                    )

            if error_keys:
                error_keys_text = "\n".join([f"`{key}`" for key in error_keys])
                if len(error_keys_text) > 1024:
                    chunks = [error_keys_text[i:i+1024] for i in range(0, len(error_keys_text), 1024)]
                    for i, chunk in enumerate(chunks):
                        embed.add_field(
                            name=f"‚õî Keys l·ªói ({len(error_keys)}) - Ph·∫ßn {i+1}",
                            value=chunk,
                            inline=False
                        )
                else:
                    embed.add_field(
                        name=f"‚õî Keys l·ªói ({len(error_keys)})",
                        value=error_keys_text,
                        inline=False
                    )

            await interaction.followup.send(embed=embed, ephemeral=True)
            return

        # X·ª≠ l√Ω m·ªôt key duy nh·∫•t
        async with aiohttp.ClientSession() as session:
            result = await check_single_key(session, key_list[0])
            
            if result[1] == "active":
                await interaction.followup.send(f"‚úÖ Key `{result[0]}` c√≤n **{result[2]}** ng√†y.", ephemeral=True)
            elif result[1] == "not_activated":
                await interaction.followup.send(f"‚ö†Ô∏è Key `{result[0]}` ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t.", ephemeral=True)
            elif result[1] == "inactive":
                await interaction.followup.send(f"‚ùå Key `{result[0]}` ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i.", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra key.", ephemeral=True)

    except Exception as e:
        print(f"Error checking key: {e}")
        await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra key.", ephemeral=True)


@bot.tree.command(name="addtime", description="Th√™m th·ªùi gian cho key")
@app_commands.describe(
    account="T√†i kho·∫£n c·∫ßn th√™m th·ªùi gian (nhi·ªÅu t√†i kho·∫£n c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng)",
    hours="S·ªë gi·ªù c·∫ßn th√™m"
)
async def add_time(
    interaction: discord.Interaction,
    account: str,
    hours: int
):
    try:
        # Ki·ªÉm tra quy·ªÅn admin
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
            
        # Ki·ªÉm tra s·ªë gi·ªù
        if hours <= 0:
            await interaction.response.send_message("‚ùå S·ªë gi·ªù ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
            return
            
        await interaction.response.defer(ephemeral=True)
        
        # T√°ch c√°c t√†i kho·∫£n n·∫øu c√≥ nhi·ªÅu t√†i kho·∫£n
        account_list = [acc.strip() for acc in account.split() if acc.strip()]
        
        if len(account_list) > 30:
            await interaction.followup.send("‚ùå Vui l√≤ng th√™m th·ªùi gian t·ªëi ƒëa 30 t√†i kho·∫£n m·ªôt l·∫ßn.", ephemeral=True)
            return
        
        # Kh·ªüi t·∫°o lists ƒë·ªÉ l∆∞u k·∫øt qu·∫£
        success_accounts = []
        failed_accounts = []
        
        # T·∫°o session ƒë·ªÉ t√°i s·ª≠ d·ª•ng connection
        async with aiohttp.ClientSession() as session:
            # H√†m x·ª≠ l√Ω th√™m th·ªùi gian cho m·ªôt t√†i kho·∫£n
            async def add_time_single(session, account):
                api_url = f"http://sv.hackrules.com/API/addtime.php?API={API_KEY}&TK={account}&SOGIO={hours}"
                try:
                    async with session.get(api_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                        if response.status == 200:
                            data = await response.text()
                            try:
                                # Th·ª≠ parse JSON t·ª´ ph·∫£n h·ªìi
                                json_data = await response.json()
                                # Ki·ªÉm tra n·∫øu message l√† "OK" th√¨ coi l√† th√†nh c√¥ng
                                if json_data.get("message") == "OK":
                                    return (account, True, "Th√†nh c√¥ng")
                                else:
                                    return (account, False, f"L·ªói: {data}")
                            except:
                                # N·∫øu kh√¥ng ph·∫£i JSON, ki·ªÉm tra theo c√°ch c≈©
                                if "success" in data.lower() or "ok" in data.lower():
                                    return (account, True, "Th√†nh c√¥ng")
                                else:
                                    return (account, False, f"L·ªói: {data}")
                        else:
                            return (account, False, f"M√£ l·ªói: {response.status}")
                except Exception as e:
                    return (account, False, str(e))
            
            # Ch·∫°y t·∫•t c·∫£ requests ƒë·ªìng th·ªùi
            tasks = [add_time_single(session, acc) for acc in account_list]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Ph√¢n lo·∫°i k·∫øt qu·∫£
            for result in results:
                if isinstance(result, tuple):
                    acc = result[0]
                    success = result[1]
                    message = result[2]
                    if success:
                        success_accounts.append(acc)
                    else:
                        failed_accounts.append((acc, message))
                else:
                    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p exception
                    failed_accounts.append((account_list[results.index(result)], "L·ªói kh√¥ng x√°c ƒë·ªãnh"))
        
        # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        embed = discord.Embed(
            title="üìä K·∫øt qu·∫£ th√™m th·ªùi gian",
            color=discord.Color.blue(),
            timestamp=interaction.created_at
        )
        
        # Th√™m t·ªïng k·∫øt l√™n ƒë·∫ßu
        total = len(account_list)
        summary = f"T·ªïng s·ªë t√†i kho·∫£n: **{total}**\n"
        summary += f"‚úÖ Th√†nh c√¥ng: **{len(success_accounts)}**\n"
        summary += f"‚ùå Th·∫•t b·∫°i: **{len(failed_accounts)}**\n"
        summary += f"‚è±Ô∏è S·ªë gi·ªù ƒë√£ th√™m: **{hours}** gi·ªù/t√†i kho·∫£n"
        
        embed.description = summary
        
        # Th√™m th√¥ng tin cho t·ª´ng lo·∫°i t√†i kho·∫£n
        if success_accounts:
            success_accounts_text = "\n".join([f"`{acc}`" for acc in success_accounts])
            if len(success_accounts_text) > 1024:
                chunks = [success_accounts_text[i:i+1024] for i in range(0, len(success_accounts_text), 1024)]
                for i, chunk in enumerate(chunks):
                    embed.add_field(
                        name=f"‚úÖ T√†i kho·∫£n th√†nh c√¥ng ({len(success_accounts)}) - Ph·∫ßn {i+1}",
                        value=chunk,
                        inline=False
                    )
            else:
                embed.add_field(
                    name=f"‚úÖ T√†i kho·∫£n th√†nh c√¥ng ({len(success_accounts)})",
                    value=success_accounts_text,
                    inline=False
                )
        
        if failed_accounts:
            failed_accounts_text = "\n".join([f"`{acc}` - {msg}" for acc, msg in failed_accounts])
            if len(failed_accounts_text) > 1024:
                chunks = [failed_accounts_text[i:i+1024] for i in range(0, len(failed_accounts_text), 1024)]
                for i, chunk in enumerate(chunks):
                    embed.add_field(
                        name=f"‚ùå T√†i kho·∫£n th·∫•t b·∫°i ({len(failed_accounts)}) - Ph·∫ßn {i+1}",
                        value=chunk,
                        inline=False
                    )
            else:
                embed.add_field(
                    name=f"‚ùå T√†i kho·∫£n th·∫•t b·∫°i ({len(failed_accounts)})",
                    value=failed_accounts_text,
                    inline=False
                )
        
        # G·ª≠i k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng
        await interaction.followup.send(embed=embed, ephemeral=True)
        
        # G·ª≠i log v√†o channel
        if success_accounts:
            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                log_embed = discord.Embed(
                    title="üìù Log Th√™m Th·ªùi Gian",
                    description="Chi ti·∫øt thao t√°c:",
                    color=discord.Color.blue(),
                    timestamp=interaction.created_at
                )
                log_embed.add_field(
                    name="Ng∆∞·ªùi th·ª±c hi·ªán",
                    value=f"{interaction.user.mention} (`{interaction.user.name}`)",
                    inline=True
                )
                log_embed.add_field(
                    name="S·ªë t√†i kho·∫£n",
                    value=f"`{len(success_accounts)}/{total}`",
                    inline=True
                )
                log_embed.add_field(
                    name="S·ªë gi·ªù th√™m",
                    value=f"`{hours} gi·ªù`",
                    inline=True
                )
                
                # Th√™m danh s√°ch t√†i kho·∫£n th√†nh c√¥ng
                success_accounts_text = "\n".join([f"`{acc}`" for acc in success_accounts])
                if len(success_accounts_text) > 1024:
                    chunks = [success_accounts_text[i:i+1024] for i in range(0, len(success_accounts_text), 1024)]
                    for i, chunk in enumerate(chunks):
                        log_embed.add_field(
                            name=f"T√†i kho·∫£n ƒë√£ th√™m th·ªùi gian - Ph·∫ßn {i+1}",
                            value=chunk,
                            inline=False
                        )
                else:
                    log_embed.add_field(
                        name="T√†i kho·∫£n ƒë√£ th√™m th·ªùi gian",
                        value=success_accounts_text,
                        inline=False
                    )
                
                await log_channel.send(embed=log_embed)
                
    except Exception as e:
        print(f"Error in addtime command: {e}")
        await interaction.followup.send("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)

# Run the bot
bot.run(DISCORD_TOKEN)
